#!/usr/bin/env python
"""
program that accepts two lines (x1,x2) and (x3,x4) on the x-axis and returns
whether they overlap.

As an example, (1,5) and (2,6) overlaps but not (1,5) and (6,8).
"""

import sys
from inspect import getsourcefile
import os.path

if __name__ == '__main__':
    current_path = os.path.abspath(getsourcefile(lambda:0))
    current_dir = os.path.dirname(current_path)
    parent_dir = current_dir[:current_dir.rfind(os.path.sep)]
    sys.path.insert(0, parent_dir)

from quessyalexandre import linesoverlap


def get_cli_args():
    """
    Parse the arguments passed to this program.
    """
    args = sys.argv[1:]
    if len(args) != 4:
        program_name = sys.argv[0]
        print("Usage: %(program_name) <x1> <x2> <x3> <x4>".format({'program_name': program_name}))
        sys.exit(1)
    return args


def format_answer(is_overlapping, coords1, coords2):
    """
    Formats the answer for the user.
    """
    print("Do they overlap?")
    # print("%s %s" % (coords1, coords2))
    print(is_overlapping)


def exit_with_true_of_false(is_overlapping):
    """
    Exit with 0 or 1, depending on if they match or not.
    """
    if is_overlapping:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == '__main__':
    # Parse command-line arguments
    args = get_cli_args()
    line1 = (args[0], args[1])
    line2 = (args[2], args[3])

    # Check if it overlaps
    is_overlapping = linesoverlap.linesoverlap(line1, line2)

    # Output result and exit with the right return value
    format_answer(is_overlapping, line1, line2)
    exit_with_true_of_false(is_overlapping)

